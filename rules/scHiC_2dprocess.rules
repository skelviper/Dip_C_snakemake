
rule align2pairs:
    input:
        hickit = config["softwares"]["HICKIT"],
        snp_file = config["refs"][config["ref_genome"]]["snp"],
        par_file = config["refs"][config["ref_genome"]]["par"],
        bam = rules.bwa_map.output.bam,
    output:
        contacts_seg = "processed/{sample}/2d_info/contacts.seg.gz",
    params:
        yperx_threshold = config["yperx_threshold"],
        if_snp = config["if_snp"],
        if_ht = config["if_ht"],
        ref_genome = config["ref_genome"],
    log:
        contacts_seg_log = "processed/{sample}/2d_info/contacts.seg.log",
        raw_pairs_log = "processed/{sample}/2d_info/raw.pairs.log",
        contacts_pairs_log = "processed/{sample}/2d_info/contacts.pairs.log",
        yperx = "processed/{sample}/2d_info/{sample}.yperx.txt",
    threads: config["resources"]["align2pairs_cpu_threads"],
    resources:
        mem_mb = 10000,
        nodes = config["resources"]["align2pairs_cpu_threads"],

    shell: """
        # decide sex
        ref_genome={params.ref_genome}
        if_snp={params.if_snp}
        if_ht={params.if_ht}
        if [ $ref_genome == "Mmul10" ] 
        then
            samtools view -h {input.bam} | samtools sort -n -@10 | samtools view -h | {input.hickit}/hickit.js sam2seg - 2> {log.contacts_seg_log} |\
                {input.hickit}/hickit.js chronly -r NC_* - | (if [ $if_ht == "False" ]; then sed 's/-/+/g'; else cat; fi) | gzip > {output.contacts_seg}
        else
            yperx=`awk 'BEGIN{{printf "%.6f",('$(samtools view -q 30 {input.bam} chrY |wc -l)'/'$(samtools view -q 30 {input.bam} chrX | wc -l)')}}'`
            echo $yperx > {log.yperx}

            if [ $if_snp == "True" ]
            then
                if [ $yperx \> {params.yperx_threshold} ]
                then
                    samtools view -h {input.bam} | samtools sort -n -@10 | samtools view -h | {input.hickit}/hickit.js sam2seg  -v {input.snp_file} - 2> {log.contacts_seg_log} |\
                    {input.hickit}/hickit.js chronly - | {input.hickit}/hickit.js bedflt {input.par_file} - | (if [ $if_ht == "False" ]; then sed 's/-/+/g'; else cat; fi) | gzip > {output.contacts_seg}
                else
                    samtools view -h {input.bam} | samtools sort -n -@10 | samtools view -h | {input.hickit}/hickit.js sam2seg -v {input.snp_file} - 2> {log.contacts_seg_log} | {input.hickit}/hickit.js chronly -y - | (if [ $if_ht == "False" ]; then sed 's/-/+/g'; else cat; fi) | gzip > {output.contacts_seg}
                fi
            else
                if [ $yperx \> {params.yperx_threshold} ]
                then
                    samtools view -h {input.bam} | samtools sort -n -@10 | samtools view -h | {input.hickit}/hickit.js sam2seg  - 2> {log.contacts_seg_log} |\
                    {input.hickit}/hickit.js chronly - | (if [ $if_ht == "False" ]; then sed 's/-/+/g'; else cat; fi) | gzip > {output.contacts_seg}
                else
                    samtools view -h {input.bam} | samtools sort -n -@10 | samtools view -h | {input.hickit}/hickit.js sam2seg - 2> {log.contacts_seg_log} | {input.hickit}/hickit.js chronly -y - | (if [ $if_ht == "False" ]; then sed 's/-/+/g'; else cat; fi) | gzip > {output.contacts_seg}
                fi
            fi
        fi
    """

rule seg2pairs:
    input:
        hickit = config["softwares"]["HICKIT"],
        contacts_seg = rules.align2pairs.output.contacts_seg,
    output:
        raw_pairs = "processed/{sample}/2d_info/raw.pairs.gz",
        contacts_pairs = "processed/{sample}/2d_info/contacts.pairs.gz",
    params:
        if_ht = config["if_ht"],
    log:
        raw_pairs_log = "processed/{sample}/2d_info/raw.pairs.log",
        contacts_pairs_log = "processed/{sample}/2d_info/contacts.pairs.log",

    shell:"""
        if_ht={params.if_ht}
        #generate raw.pairs.gz for statistics
        {input.hickit}/hickit --dup-dist=0 -i {input.contacts_seg} -o - 2> {log.raw_pairs_log} | gzip > {output.raw_pairs}
        #generate deduped pairs
        if [ $if_ht == "False" ]
        then
            {input.hickit}/hickit --dup-dist=500 -i {input.contacts_seg} -o - 2> {log.contacts_pairs_log} | gzip > {output.contacts_pairs}
        else
            {input.hickit}/hickit --dup-dist=1 -i {input.contacts_seg} -o - 2> {log.contacts_pairs_log} | gzip > {output.contacts_pairs}
        fi

    """

#clean premiscus legs and isolatied contacts
rule cleanPairs:
    input: 
        charmtools = config["softwares"]["CHARMtools"],
        hickit = config["softwares"]["HICKIT"],
        contacts_pairs = rules.seg2pairs.output.contacts_pairs,
    output: 
        clean1_pairs= "result/cleaned_pairs/c1/{sample}.pairs.gz",
        clean12_pairs = "result/cleaned_pairs/c12/{sample}.pairs.gz",
    threads: config["resources"]["hires_clean_cpu_threads"]
    resources:
        nodes = config["resources"]["hires_clean_cpu_threads"],
    params:
        ref_genome = config["ref_genome"],
    shell:"""
        mkdir -p result/cleaned_pairs/c1
        mkdir -p result/cleaned_pairs/c12

        python {input.charmtools} clean_leg -t {threads} {input.contacts_pairs} -o {output.clean1_pairs}
        python {input.charmtools} clean_isolated -t {threads} -o {output.clean12_pairs} {output.clean1_pairs}


    """


rule hickit_2d:
    input:
        hickit = config["softwares"]["HICKIT"],
        cleaned_pairs = rules.cleanPairs.output.clean12_pairs,
    output:
        impute_pairs = "result/impute/pairs/{sample}.impute.pairs.gz",
        impute_val = "result/impute/val/{sample}.impute.val",
    log:
        impute_pairs_log = "processed/{sample}/2d_info/{sample}.impute.pairs.log",
        impute_val_log = "processed/{sample}/2d_info/{sample}.impute.val.log",
    resources:
        nodes = 1

    shell:"""

        #impute phases
        {input.hickit}/hickit -i {input.cleaned_pairs} -u -o - 2> {log.impute_pairs_log} | bgzip > {output.impute_pairs}
        # estimate imputation accuracy by holdout
        {input.hickit}/hickit -i {input.cleaned_pairs} --out-val={output.impute_val} 2> {log.impute_val_log}

        """

rule sep_for_clean:
    input:
        #software
        charmtools = config["softwares"]["CHARMtools"],
        #file
        impute_pairs = rules.hickit_2d.output.impute_pairs,
    output:
        dip_pairs = "result/dip_pairs/{sample}.dip.pairs.gz",
        hickit_pairs = "processed/{sample}/2d_info/{sample}.hickit.pairs.gz",
    threads: 4
    resources:
        nodes = 4

    shell:"""

        python {input.charmtools} sep_clean -n {threads} -o1 {output.dip_pairs} -o2 {output.hickit_pairs} {input.impute_pairs}

    """